# Release with JReleaser
# https://jreleaser.org/guide/latest/continuous-integration/github-actions.html

name: Java CI with Maven

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  release:
    name: Release
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          fetch-depth: 0

      # Configure build steps as you'd normally do

      - name: Setup Java
        uses: actions/setup-java@v2
        with:
          java-version: 11
          distribution: 'zulu'
          server-id: central
          server-username: MAVEN_USERNAME
          server-password: MAVEN_CENTRAL_TOKEN
          gpg-private-key: ${{ secrets.GPG_PRIVATE_KEY }}
          gpg-passphrase: MAVEN_GPG_PASSPHRASE

      # Prepare for upload to Maven Central
      # https://jreleaser.org/guide/latest/examples/maven/staging-artifacts.html

      - name: Build for release
        run: |
          mvn -Ppublication deploy -DaltDeploymentRepository=local::file:./target/staging-deploy
          ls -laR ./target/staging-deploy

      # Post JARs to Maven Central

      - name: Release to Maven Central
        env:
          MAVEN_USERNAME: ${{ secrets.SONATYPE_USERNAME }}
          MAVEN_CENTRAL_TOKEN: ${{ secrets.SONATYPE_PASSWORD }}
          MAVEN_GPG_PASSPHRASE: ${{ secrets.GPG_PASSPHRASE }}
        run: |
          export GPG_TTY=$(tty)
          git config user.name "${{ github.event.head_commit.committer.name }}"
          git config user.email "${{ github.event.head_commit.committer.email }}"
      # mvn -B --file pom.xml release:prepare release:perform

      # Create a release
      # Using: mvn jreleaser:full-release
      # TODO
